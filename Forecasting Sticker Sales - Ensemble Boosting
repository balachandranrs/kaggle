{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:18:10.602172Z","iopub.execute_input":"2025-01-31T11:18:10.602625Z","iopub.status.idle":"2025-01-31T11:18:10.613895Z","shell.execute_reply.started":"2025-01-31T11:18:10.602533Z","shell.execute_reply":"2025-01-31T11:18:10.612101Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e1/sample_submission.csv\n/kaggle/input/playground-series-s5e1/train.csv\n/kaggle/input/playground-series-s5e1/test.csv\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s5e1/train.csv')\ntest = pd.read_csv('/kaggle/input/playground-series-s5e1/test.csv')\nprint(train.head(6))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:30:30.954895Z","iopub.execute_input":"2025-01-31T11:30:30.955274Z","iopub.status.idle":"2025-01-31T11:30:31.289469Z","shell.execute_reply.started":"2025-01-31T11:30:30.955244Z","shell.execute_reply":"2025-01-31T11:30:31.287914Z"}},"outputs":[{"name":"stdout","text":"   id        date country              store             product  num_sold\n0   0  2010-01-01  Canada  Discount Stickers   Holographic Goose       NaN\n1   1  2010-01-01  Canada  Discount Stickers              Kaggle     973.0\n2   2  2010-01-01  Canada  Discount Stickers        Kaggle Tiers     906.0\n3   3  2010-01-01  Canada  Discount Stickers            Kerneler     423.0\n4   4  2010-01-01  Canada  Discount Stickers  Kerneler Dark Mode     491.0\n5   5  2010-01-01  Canada  Stickers for Less   Holographic Goose     300.0\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"train.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:30:31.291739Z","iopub.execute_input":"2025-01-31T11:30:31.292200Z","iopub.status.idle":"2025-01-31T11:30:31.301466Z","shell.execute_reply.started":"2025-01-31T11:30:31.292151Z","shell.execute_reply":"2025-01-31T11:30:31.299308Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"id            int64\ndate         object\ncountry      object\nstore        object\nproduct      object\nnum_sold    float64\ndtype: object"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"from catboost import CatBoostRegressor\nfrom catboost import Pool\n\ntrain['num_sold'] = train['num_sold'].fillna(train['num_sold'].mean())\ntrain['num_sold'] = np.log(train['num_sold'])\n\nX = train.drop(columns = ['id', 'num_sold']).astype('str').astype('category')\ny = train['num_sold']\n\nx_test = test.drop(columns = 'id').astype('str').astype('category')\n\ntrain_pool = Pool(data = X, label = y, cat_features = X.columns.values)\ntest_pool = Pool(data = x_test, cat_features = x_test.columns.values)\n\ncatboost_model = CatBoostRegressor(\n                    iterations = 1000,\n                    learning_rate = 0.1,\n                    depth = 6,\n                    cat_features = X.columns.values,\n                    loss_function = 'MAE',\n                    verbose = 100\n)\n\ncatboost_model.fit(train_pool)\n\ncat_train = catboost_model.predict(train_pool).reshape(-1,1)\ncat_test = catboost_model.predict(test_pool).reshape(-1,1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:30:31.399438Z","iopub.execute_input":"2025-01-31T11:30:31.399932Z","iopub.status.idle":"2025-01-31T11:30:31.559987Z","shell.execute_reply.started":"2025-01-31T11:30:31.399811Z","shell.execute_reply":"2025-01-31T11:30:31.557770Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"import xgboost as xgb\n\ndtrain = xgb.DMatrix(X, label=y, enable_categorical=True)\ndtest = xgb.DMatrix(x_test, enable_categorical=True)\n\nparams = {\n    'objective': 'reg:squarederror',\n    'max_depth': 6,\n    'eta': 0.1,\n    'subsample': 0.8,\n    'colsample_bytree': 0.8,\n    'eval_metric': 'rmse',\n    'seed': 42,\n}\nxgb_model = xgb.train(params, dtrain, 1000, verbose_eval=100)\nxgb_train = xgb_model.predict(dtrain).reshape(-1,1)\nxgb_test = xgb_model.predict(dtest).reshape(-1,1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:42:48.393190Z","iopub.execute_input":"2025-01-31T11:42:48.393521Z","iopub.status.idle":"2025-01-31T11:43:24.633450Z","shell.execute_reply.started":"2025-01-31T11:42:48.393495Z","shell.execute_reply":"2025-01-31T11:43:24.632482Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"import lightgbm as lgb\n\nlgb_model = lgb.LGBMRegressor(n_estimators=1000, learning_rate=0.1)\nlgb_model.fit(X, y)\nlgb_train = lgb_model.predict(X).reshape(-1,1)\nlgb_test = lgb_model.predict(x_test).reshape(-1,1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:44:15.254364Z","iopub.execute_input":"2025-01-31T11:44:15.254780Z","iopub.status.idle":"2025-01-31T11:44:45.881178Z","shell.execute_reply.started":"2025-01-31T11:44:15.254747Z","shell.execute_reply":"2025-01-31T11:44:45.879907Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Warning] Categorical features with more bins than the configured maximum bin number found.\n[LightGBM] [Warning] For categorical features, max_bin and max_bin_by_feature may be ignored with a large number of categories.\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006197 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 2546\n[LightGBM] [Info] Number of data points in the train set: 230130, number of used features: 4\n[LightGBM] [Info] Start training from score 5.952440\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"stacked_train = np.hstack((xgb_train, cat_train, lgb_train))\nstacked_test = np.hstack((xgb_test, cat_test, lgb_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:46:37.379462Z","iopub.execute_input":"2025-01-31T11:46:37.380232Z","iopub.status.idle":"2025-01-31T11:46:37.389735Z","shell.execute_reply.started":"2025-01-31T11:46:37.380194Z","shell.execute_reply":"2025-01-31T11:46:37.388625Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"from sklearn.linear_model import Ridge\nmeta_model = Ridge(alpha=1.0)\nmeta_model.fit(stacked_train, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:49:16.482327Z","iopub.execute_input":"2025-01-31T11:49:16.482891Z","iopub.status.idle":"2025-01-31T11:49:16.563789Z","shell.execute_reply.started":"2025-01-31T11:49:16.482854Z","shell.execute_reply":"2025-01-31T11:49:16.562666Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"Ridge()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"y_pred = np.exp(meta_model.predict(stacked_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:49:22.336030Z","iopub.execute_input":"2025-01-31T11:49:22.336388Z","iopub.status.idle":"2025-01-31T11:49:22.346935Z","shell.execute_reply.started":"2025-01-31T11:49:22.336358Z","shell.execute_reply":"2025-01-31T11:49:22.345672Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"submission = pd.DataFrame({\n                'id' : test['id'],\n                'num_sold' : y_pred\n})\n\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T11:53:55.962971Z","iopub.execute_input":"2025-01-31T11:53:55.963331Z","iopub.status.idle":"2025-01-31T11:53:56.183529Z","shell.execute_reply.started":"2025-01-31T11:53:55.963304Z","shell.execute_reply":"2025-01-31T11:53:56.181987Z"}},"outputs":[],"execution_count":30}]}